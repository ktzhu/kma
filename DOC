We implemented both the required algorithms as well as the SVR4 Lazy Buddy and McKusick-Karels extra credit algorithms.

Authors:
Aedan Maher (agm564)
Jeanette Huang (jyh286)
Katie Zhu (kaz600)

Required Algorithms:

Power-of-two Free List - KMA_P2FL:

We implemented P2FL using free lists of sizes in powers of two. Each free list points to a buffer, which in turn has a struct member that points to the free list it's in. We also track a page's number of allocated blocks and a count of how many pages have been used. In our P2FL implementation our blocks are contiguous so when we free a buffer we naively add it to the head of our free list which impacts efficiency. Our allocation is as follows: when a request is made, the first plan of attack is to check our free list. We want to avoid requesting a new page if there's still free space in the buffer. If this fails, the next tactic is to look within the current page to see if there's enough available space in other buffer. If these both fail, then plan C is to finally ask for a new page.

Trace 1:
real 0.02
user 0.00
sys 0.00

Trace 2:
real 0.02
user 0.00
sys 0.00

Trace 3:
real 0.19
user 0.09
sys 0.01

Trace 4:
real 0.38
user 0.30
sys 0.01

Trace 5:
real 7.54
user 7.05
sys 0.01

Buddy System - KMA_BUD:

Trace 1:
real 0.02
user 0.00
sys 0.00

Trace 2:
real 0.02
user 0.00
sys 0.00

Trace 3:
real 0.16
user 0.04
sys 0.01

Trace 4:
real 0.15
user 0.07
sys 0.01

Trace 5:
real 0.81
user 0.37
sys 0.02

Our implementation of the buddy system algorithm allocates buffers as a full page, and we have a global variable that we use to keep track how many pages are being used as well as how many allocs we have done. In addition, we implemented a list that keeps track of every block that is free, so whenever there is a request, we simply check that list. If there is a hit, we call `split` on our large buffer to get smaller ones (half the size of the large) until we find the correct size block. If there is a miss, create a new page and then split the buffer to find the appropriate-sized block. We implemented `coalesce` to combine buddy blocks.


Extra Credit Algorithms:

SVR4 Lazy Buddy - KMA_LZBUD:

Trace 1:
real 0.02
user 0.00
sys 0.01

Trace 2:
real 0.04
user 0.00
sys 0.00

Trace 3:
real 0.11
user 0.04
sys 0.01

Trace 4:
real 0.15
user 0.09
sys 0.01

Trace 5:
real 0.83
user 0.35
sys 0.02

The SVR4 lazy buddy algorithm is very similar to our implementation of the buddy system algorithm, though a significant change is that we now add free buffers to our free list in increasing address order of the buffer. In addition, we added a variable to our list struct that keeps track of the slack of every free list.


McKusick- Karels - KMA_MCK2:

For our MCK implementation, we adapted P2FL's implementation but use a fixed size. We link all our buffers and for page initialization, we chunk up a page equally into this fixed size. Because we've implemented MCK using P2FL's sequential allocation, to free a middle block we mark it empty (make the first buffer in the page point to what the last buffer is pointing to and remove first buffer from the linked list).

Trace 1:
real 0.03
user 0.00
sys 0.00

Trace 2:
real 0.04
user 0.00
sys 0.01

Trace 3:
real 0.09
user 0.03
sys 0.00

Trace 4:
real 0.13
user 0.06
sys 0.01

Trace 5:
real 0.77
user 0.29
sys 0.01
